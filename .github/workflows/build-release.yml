name: Build OpenWRT package (release)

# Trigger on version tags only
on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v1.0.1, etc.

jobs:
  build-packages:
    name: Build OpenWrt ${{ matrix.openwrt_version }} Package
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - openwrt_version: '23.05'
            arch: 'x86_64-23.05.0'
            libgpiod_version: 'v1'
          - openwrt_version: '24.10'
            arch: 'x86_64-24.10.0'
            libgpiod_version: 'v2'
      fail-fast: false
    
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag_name: ${{ steps.get_version.outputs.tag_name }}
      package_path: ${{ steps.build_package.outputs.package_path }}
      package_name: ${{ steps.build_package.outputs.package_name }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ github.workspace }}/feed/gpio-fan-rpm

      - name: Get version from tag
        id: get_version
        run: |
          # Extract version from tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          TAG_NAME="v$VERSION"
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION for OpenWrt ${{ matrix.openwrt_version }}"

      - name: Create artifacts directory structure
        run: |
          mkdir -p ${{ github.workspace }}/artifacts

      - name: Build OpenWrt ${{ matrix.openwrt_version }} package
        id: build_package
        uses: openwrt/gh-action-sdk@main
        env:
          ARCH: ${{ matrix.arch }}
          PACKAGES: gpio-fan-rpm
          V: s
          FEED_DIR: ${{ github.workspace }}/feed
          ARTIFACTS_DIR: ${{ github.workspace }}/artifacts

      - name: Find and save package info
        id: package_info
        run: |
          # Find the built package
          PACKAGE_PATH=$(find ${{ github.workspace }}/artifacts/bin/ -name 'gpio-fan-rpm*.ipk' -type f | head -1)
          
          if [ -z "$PACKAGE_PATH" ]; then
            echo "❌ No package found for OpenWrt ${{ matrix.openwrt_version }}"
            exit 1
          fi
          
          PACKAGE_NAME=$(basename "$PACKAGE_PATH")
          
          echo "✅ Found package: $PACKAGE_NAME"
          echo "package_path=$PACKAGE_PATH" >> $GITHUB_OUTPUT
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          
          # Copy to a versioned directory for the release
          mkdir -p ${{ github.workspace }}/release-assets
          cp "$PACKAGE_PATH" "${{ github.workspace }}/release-assets/gpio-fan-rpm-${{ matrix.openwrt_version }}-${{ steps.get_version.outputs.version }}.ipk"

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: gpio-fan-rpm-${{ matrix.openwrt_version }}-${{ steps.get_version.outputs.version }}.ipk
          path: ${{ github.workspace }}/release-assets/gpio-fan-rpm-${{ matrix.openwrt_version }}-${{ steps.get_version.outputs.version }}.ipk
          retention-days: 30

  create-release:
    name: Create GitHub Release
    needs: build-packages
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate dynamic release notes
        id: release_notes
        run: |
          # Make the script executable and run it
          chmod +x scripts/generate-release-notes.sh
          
          # Generate release notes to a file
          ./scripts/generate-release-notes.sh > release-notes.md
          
          # Read the file content for GitHub Actions output
          RELEASE_BODY=$(cat release-notes.md)
          
          # Use GitHub Actions multiline output syntax
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          cat release-notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Download all package artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ github.workspace }}/release-assets/
          pattern: gpio-fan-rpm-*.ipk
          merge-multiple: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build-packages.outputs.tag_name }}
          # name: "Release ${{ needs.build-packages.outputs.version }}"
          # body: ${{ steps.release_notes.outputs.release_body }}
          files: ${{ github.workspace }}/release-assets/*.ipk
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.OWRT_PACKAGE_RELEASE_TOKEN }}

      - name: Release Summary
        run: |
          CURRENT_VERSION=${GITHUB_REF#refs/tags/v}
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Release Created**: v$CURRENT_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Packages Built**: " >> $GITHUB_STEP_SUMMARY
          echo "- OpenWRT 23.05 (libgpiod v1)" >> $GITHUB_STEP_SUMMARY
          echo "- OpenWRT 24.10 (libgpiod v2)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          ls ${{ github.workspace }}/release-assets/ >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Architecture**: x86_64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release URL**: https://github.com/${{ github.repository }}/releases/tag/v$CURRENT_VERSION" >> $GITHUB_STEP_SUMMARY

 